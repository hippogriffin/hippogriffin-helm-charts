{
  "v1.grpcRouteMatch": {
    "description": "GRPCRouteMatch defines the predicate used to match requests to a given\naction. Multiple match types are ANDed together, i.e. the match will\nevaluate to true only if all conditions are satisfied.\n\nFor example, the match below will match a gRPC request only if its service\nis `foo` AND it contains the `version: v1` header:\n\n```\nmatches:\n  - method:\n    type: Exact\n    service: \"foo\"\n    headers:\n  - name: \"version\"\n    value \"v1\"\n\n```",
    "properties": {
      "headers": {
        "description": "Headers specifies gRPC request header matchers. Multiple match values are\nANDed together, meaning, a request MUST match all the specified headers\nto select the route.",
        "items": {
          "description": "GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request\nheaders.",
          "properties": {
            "name": {
              "description": "Name is the name of the gRPC Header to be matched.\n\nIf multiple entries specify equivalent header names, only the first\nentry with an equivalent name MUST be considered for a match. Subsequent\nentries with an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
              "type": "string"
            },
            "type": {
              "default": "Exact",
              "description": "Type specifies how to match against the value of the header.",
              "enum": ["Exact", "RegularExpression"],
              "type": "string"
            },
            "value": {
              "description": "Value is the value of the gRPC Header to be matched.",
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": ["name", "value"],
          "type": "object",
          "additionalProperties": false
        },
        "maxItems": 16,
        "type": "array",
        "x-kubernetes-list-map-keys": ["name"],
        "x-kubernetes-list-type": "map"
      },
      "method": {
        "description": "Method specifies a gRPC request service/method matcher. If this field is\nnot specified, all services and methods will match.",
        "properties": {
          "method": {
            "description": "Value of the method to match against. If left empty or omitted, will\nmatch all services.\n\nAt least one of Service and Method MUST be a non-empty string.",
            "maxLength": 1024,
            "type": "string"
          },
          "service": {
            "description": "Value of the service to match against. If left empty or omitted, will\nmatch any service.\n\nAt least one of Service and Method MUST be a non-empty string.",
            "maxLength": 1024,
            "type": "string"
          },
          "type": {
            "default": "Exact",
            "description": "Type specifies how to match against the service and/or method.\nSupport: Core (Exact with service and method specified)\n\nSupport: Implementation-specific (Exact with method specified but no service specified)\n\nSupport: Implementation-specific (RegularExpression)",
            "enum": ["Exact", "RegularExpression"],
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "One or both of 'service' or 'method' must be specified",
            "rule": "has(self.type) ? has(self.service) || has(self.method) : true"
          },
          {
            "message": "service must only contain valid characters (matching ^(?i)\\.?[a-z_][a-z_0-9]*(\\.[a-z_][a-z_0-9]*)*$)",
            "rule": "(!has(self.type) || self.type == 'Exact') && has(self.service) ? self.service.matches(r\"\"\"^(?i)\\.?[a-z_][a-z_0-9]*(\\.[a-z_][a-z_0-9]*)*$\"\"\"): true"
          },
          {
            "message": "method must only contain valid characters (matching ^[A-Za-z_][A-Za-z_0-9]*$)",
            "rule": "(!has(self.type) || self.type == 'Exact') && has(self.method) ? self.method.matches(r\"\"\"^[A-Za-z_][A-Za-z_0-9]*$\"\"\"): true"
          }
        ],
        "additionalProperties": false
      }
    },
    "type": "object",
    "additionalProperties": false
  },

  "v1.grpcRouteFilter": {
    "description": "GRPCRouteFilter defines processing steps that must be completed during the\nrequest or response lifecycle. GRPCRouteFilters are meant as an extension\npoint to express processing that may be done in Gateway implementations. Some\nexamples include request or response modification, implementing\nauthentication strategies, rate-limiting, and traffic shaping. API\nguarantee/conformance is defined based on the type of the filter.",
    "properties": {
      "extensionRef": {
        "description": "ExtensionRef is an optional, implementation-specific extension to the\n\"filter\" behavior.  For example, resource \"myroutefilter\" in group\n\"networking.example.net\"). ExtensionRef MUST NOT be used for core and\nextended filters.\n\nSupport: Implementation-specific\n\nThis filter can be used multiple times within the same rule.",
        "properties": {
          "group": {
            "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
            "maxLength": 253,
            "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string"
          },
          "kind": {
            "description": "Kind is kind of the referent. For example \"HTTPRoute\" or \"Service\".",
            "maxLength": 63,
            "minLength": 1,
            "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
            "type": "string"
          },
          "name": {
            "description": "Name is the name of the referent.",
            "maxLength": 253,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": ["group", "kind", "name"],
        "type": "object",
        "additionalProperties": false
      },
      "requestHeaderModifier": {
        "description": "RequestHeaderModifier defines a schema for a filter that modifies request\nheaders.\n\nSupport: Core",
        "properties": {
          "add": {
            "description": "Add adds the given header(s) (name, value) to the request\nbefore the action. It appends to any existing values associated\nwith the header name.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  add:\n  - name: \"my-header\"\n    value: \"bar,baz\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: foo,bar,baz",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          },
          "remove": {
            "description": "Remove the given header(s) from the HTTP request before the action. The\nvalue of Remove is a list of HTTP header names. Note that the header\nnames are case-insensitive (see\nhttps://datatracker.ietf.org/doc/html/rfc2616#section-4.2).\n\nInput:\n  GET /foo HTTP/1.1\n  my-header1: foo\n  my-header2: bar\n  my-header3: baz\n\nConfig:\n  remove: [\"my-header1\", \"my-header3\"]\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header2: bar",
            "items": {
              "type": "string"
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "set": {
            "description": "Set overwrites the request with the given header (name, value)\nbefore the action.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  set:\n  - name: \"my-header\"\n    value: \"bar\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: bar",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "requestMirror": {
        "description": "RequestMirror defines a schema for a filter that mirrors requests.\nRequests are sent to the specified destination, but responses from\nthat destination are ignored.\n\nThis filter can be used multiple times within the same rule. Note that\nnot all implementations will be able to support mirroring to multiple\nbackends.\n\nSupport: Extended\n\n",
        "properties": {
          "backendRef": {
            "description": "BackendRef references a resource where mirrored requests are sent.\n\nMirrored requests must be sent only to a single destination endpoint\nwithin this BackendRef, irrespective of how many endpoints are present\nwithin this BackendRef.\n\nIf the referent cannot be found, this BackendRef is invalid and must be\ndropped from the Gateway. The controller must ensure the \"ResolvedRefs\"\ncondition on the Route status is set to `status: False` and not configure\nthis backend in the underlying implementation.\n\nIf there is a cross-namespace reference to an *existing* object\nthat is not allowed by a ReferenceGrant, the controller must ensure the\n\"ResolvedRefs\"  condition on the Route is set to `status: False`,\nwith the \"RefNotPermitted\" reason and not configure this backend in the\nunderlying implementation.\n\nIn either error case, the Message of the `ResolvedRefs` Condition\nshould be used to provide more detail about the problem.\n\nSupport: Extended for Kubernetes Service\n\nSupport: Implementation-specific for any other resource",
            "properties": {
              "group": {
                "default": "",
                "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                "maxLength": 253,
                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                "type": "string"
              },
              "kind": {
                "default": "Service",
                "description": "Kind is the Kubernetes resource kind of the referent. For example\n\"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live\noutside of the cluster and as such are difficult to reason about in\nterms of conformance. They also may not be safe to forward to (see\nCVE-2021-25740 for more information). Implementations SHOULD NOT\nsupport ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
                "type": "string"
              },
              "name": {
                "description": "Name is the name of the referent.",
                "maxLength": 253,
                "minLength": 1,
                "type": "string"
              },
              "namespace": {
                "description": "Namespace is the namespace of the backend. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                "type": "string"
              },
              "port": {
                "description": "Port specifies the destination port number to use for this resource.\nPort is required when the referent is a Kubernetes Service. In this\ncase, the port number is the service port number, not the target port.\nFor other resources, destination port might be derived from the referent\nresource or this field.",
                "format": "int32",
                "maximum": 65535,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": ["name"],
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "Must have port for Service reference",
                "rule": "(size(self.group) == 0 && self.kind == 'Service') ? has(self.port) : true"
              }
            ],
            "additionalProperties": false
          },
          "fraction": {
            "description": "Fraction represents the fraction of requests that should be\nmirrored to BackendRef.\n\nOnly one of Fraction or Percent may be specified. If neither field\nis specified, 100% of requests will be mirrored.\n\n",
            "properties": {
              "denominator": {
                "default": 100,
                "format": "int32",
                "minimum": 1,
                "type": "integer"
              },
              "numerator": {
                "format": "int32",
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": ["numerator"],
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "numerator must be less than or equal to denominator",
                "rule": "self.numerator <= self.denominator"
              }
            ],
            "additionalProperties": false
          },
          "percent": {
            "description": "Percent represents the percentage of requests that should be\nmirrored to BackendRef. Its minimum value is 0 (indicating 0% of\nrequests) and its maximum value is 100 (indicating 100% of requests).\n\nOnly one of Fraction or Percent may be specified. If neither field\nis specified, 100% of requests will be mirrored.\n\n",
            "format": "int32",
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": ["backendRef"],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "Only one of percent or fraction may be specified in HTTPRequestMirrorFilter",
            "rule": "!(has(self.percent) && has(self.fraction))"
          }
        ],
        "additionalProperties": false
      },
      "responseHeaderModifier": {
        "description": "ResponseHeaderModifier defines a schema for a filter that modifies response\nheaders.\n\nSupport: Extended",
        "properties": {
          "add": {
            "description": "Add adds the given header(s) (name, value) to the request\nbefore the action. It appends to any existing values associated\nwith the header name.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  add:\n  - name: \"my-header\"\n    value: \"bar,baz\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: foo,bar,baz",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          },
          "remove": {
            "description": "Remove the given header(s) from the HTTP request before the action. The\nvalue of Remove is a list of HTTP header names. Note that the header\nnames are case-insensitive (see\nhttps://datatracker.ietf.org/doc/html/rfc2616#section-4.2).\n\nInput:\n  GET /foo HTTP/1.1\n  my-header1: foo\n  my-header2: bar\n  my-header3: baz\n\nConfig:\n  remove: [\"my-header1\", \"my-header3\"]\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header2: bar",
            "items": {
              "type": "string"
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "set": {
            "description": "Set overwrites the request with the given header (name, value)\nbefore the action.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  set:\n  - name: \"my-header\"\n    value: \"bar\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: bar",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "type": {
        "description": "Type identifies the type of filter to apply. As with other API fields,\ntypes are classified into three conformance levels:\n\n- Core: Filter types and their corresponding configuration defined by\n  \"Support: Core\" in this package, e.g. \"RequestHeaderModifier\". All\n  implementations supporting GRPCRoute MUST support core filters.\n\n- Extended: Filter types and their corresponding configuration defined by\n  \"Support: Extended\" in this package, e.g. \"RequestMirror\". Implementers\n  are encouraged to support extended filters.\n\n- Implementation-specific: Filters that are defined and supported by specific vendors.\n  In the future, filters showing convergence in behavior across multiple\n  implementations will be considered for inclusion in extended or core\n  conformance levels. Filter-specific configuration for such filters\n  is specified using the ExtensionRef field. `Type` MUST be set to\n  \"ExtensionRef\" for custom filters.\n\nImplementers are encouraged to define custom implementation types to\nextend the core API with implementation-specific behavior.\n\nIf a reference to a custom filter type cannot be resolved, the filter\nMUST NOT be skipped. Instead, requests that would have been processed by\nthat filter MUST receive a HTTP error response.\n\n",
        "enum": [
          "ResponseHeaderModifier",
          "RequestHeaderModifier",
          "RequestMirror",
          "ExtensionRef"
        ],
        "type": "string"
      }
    },
    "required": ["type"],
    "type": "object",
    "x-kubernetes-validations": [
      {
        "message": "filter.requestHeaderModifier must be nil if the filter.type is not RequestHeaderModifier",
        "rule": "!(has(self.requestHeaderModifier) && self.type != 'RequestHeaderModifier')"
      },
      {
        "message": "filter.requestHeaderModifier must be specified for RequestHeaderModifier filter.type",
        "rule": "!(!has(self.requestHeaderModifier) && self.type == 'RequestHeaderModifier')"
      },
      {
        "message": "filter.responseHeaderModifier must be nil if the filter.type is not ResponseHeaderModifier",
        "rule": "!(has(self.responseHeaderModifier) && self.type != 'ResponseHeaderModifier')"
      },
      {
        "message": "filter.responseHeaderModifier must be specified for ResponseHeaderModifier filter.type",
        "rule": "!(!has(self.responseHeaderModifier) && self.type == 'ResponseHeaderModifier')"
      },
      {
        "message": "filter.requestMirror must be nil if the filter.type is not RequestMirror",
        "rule": "!(has(self.requestMirror) && self.type != 'RequestMirror')"
      },
      {
        "message": "filter.requestMirror must be specified for RequestMirror filter.type",
        "rule": "!(!has(self.requestMirror) && self.type == 'RequestMirror')"
      },
      {
        "message": "filter.extensionRef must be nil if the filter.type is not ExtensionRef",
        "rule": "!(has(self.extensionRef) && self.type != 'ExtensionRef')"
      },
      {
        "message": "filter.extensionRef must be specified for ExtensionRef filter.type",
        "rule": "!(!has(self.extensionRef) && self.type == 'ExtensionRef')"
      }
    ],
    "additionalProperties": false
  },

  "v1.httpRouteMatch": {
    "description": "HTTPRouteMatch defines the predicate used to match requests to a given\naction. Multiple match types are ANDed together, i.e. the match will\nevaluate to true only if all conditions are satisfied.\n\nFor example, the match below will match a HTTP request only if its path\nstarts with `/foo` AND it contains the `version: v1` header:\n\n```\nmatch:\n\n\tpath:\n\t  value: \"/foo\"\n\theaders:\n\t- name: \"version\"\n\t  value \"v1\"\n\n```",
    "properties": {
      "headers": {
        "description": "Headers specifies HTTP request header matchers. Multiple match values are\nANDed together, meaning, a request must match all the specified headers\nto select the route.",
        "items": {
          "description": "HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request\nheaders.",
          "properties": {
            "name": {
              "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, only the first\nentry with an equivalent name MUST be considered for a match. Subsequent\nentries with an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.\n\nWhen a header is repeated in an HTTP request, it is\nimplementation-specific behavior as to how this is represented.\nGenerally, proxies should follow the guidance from the RFC:\nhttps://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding\nprocessing a repeated header, with special handling for \"Set-Cookie\".",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
              "type": "string"
            },
            "type": {
              "default": "Exact",
              "description": "Type specifies how to match against the value of the header.\n\nSupport: Core (Exact)\n\nSupport: Implementation-specific (RegularExpression)\n\nSince RegularExpression HeaderMatchType has implementation-specific\nconformance, implementations can support POSIX, PCRE or any other dialects\nof regular expressions. Please read the implementation's documentation to\ndetermine the supported dialect.",
              "enum": ["Exact", "RegularExpression"],
              "type": "string"
            },
            "value": {
              "description": "Value is the value of HTTP Header to be matched.",
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": ["name", "value"],
          "type": "object",
          "additionalProperties": false
        },
        "maxItems": 16,
        "type": "array",
        "x-kubernetes-list-map-keys": ["name"],
        "x-kubernetes-list-type": "map"
      },
      "method": {
        "description": "Method specifies HTTP method matcher.\nWhen specified, this route will be matched only if the request has the\nspecified method.\n\nSupport: Extended",
        "enum": [
          "GET",
          "HEAD",
          "POST",
          "PUT",
          "DELETE",
          "CONNECT",
          "OPTIONS",
          "TRACE",
          "PATCH"
        ],
        "type": "string"
      },
      "path": {
        "default": {
          "type": "PathPrefix",
          "value": "/"
        },
        "description": "Path specifies a HTTP request path matcher. If this field is not\nspecified, a default prefix match on the \"/\" path is provided.",
        "properties": {
          "type": {
            "default": "PathPrefix",
            "description": "Type specifies how to match against the path Value.\n\nSupport: Core (Exact, PathPrefix)\n\nSupport: Implementation-specific (RegularExpression)",
            "enum": ["Exact", "PathPrefix", "RegularExpression"],
            "type": "string"
          },
          "value": {
            "default": "/",
            "description": "Value of the HTTP path to match against.",
            "maxLength": 1024,
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "value must be an absolute path and start with '/' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? self.value.startsWith('/') : true"
          },
          {
            "message": "must not contain '//' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('//') : true"
          },
          {
            "message": "must not contain '/./' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('/./') : true"
          },
          {
            "message": "must not contain '/../' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('/../') : true"
          },
          {
            "message": "must not contain '%2f' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('%2f') : true"
          },
          {
            "message": "must not contain '%2F' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('%2F') : true"
          },
          {
            "message": "must not contain '#' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.contains('#') : true"
          },
          {
            "message": "must not end with '/..' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.endsWith('/..') : true"
          },
          {
            "message": "must not end with '/.' when type one of ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? !self.value.endsWith('/.') : true"
          },
          {
            "message": "type must be one of ['Exact', 'PathPrefix', 'RegularExpression']",
            "rule": "self.type in ['Exact','PathPrefix'] || self.type == 'RegularExpression'"
          },
          {
            "message": "must only contain valid characters (matching ^(?:[-A-Za-z0-9/._~!$&'()*+,;=:@]|[%][0-9a-fA-F]{2})+$) for types ['Exact', 'PathPrefix']",
            "rule": "(self.type in ['Exact','PathPrefix']) ? self.value.matches(r\"\"\"^(?:[-A-Za-z0-9/._~!$&'()*+,;=:@]|[%][0-9a-fA-F]{2})+$\"\"\") : true"
          }
        ],
        "additionalProperties": false
      },
      "queryParams": {
        "description": "QueryParams specifies HTTP query parameter matchers. Multiple match\nvalues are ANDed together, meaning, a request must match all the\nspecified query parameters to select the route.\n\nSupport: Extended",
        "items": {
          "description": "HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP\nquery parameters.",
          "properties": {
            "name": {
              "description": "Name is the name of the HTTP query param to be matched. This must be an\nexact string match. (See\nhttps://tools.ietf.org/html/rfc7230#section-2.7.3).\n\nIf multiple entries specify equivalent query param names, only the first\nentry with an equivalent name MUST be considered for a match. Subsequent\nentries with an equivalent query param name MUST be ignored.\n\nIf a query param is repeated in an HTTP request, the behavior is\npurposely left undefined, since different data planes have different\ncapabilities. However, it is *recommended* that implementations should\nmatch against the first value of the param if the data plane supports it,\nas this behavior is expected in other load balancing contexts outside of\nthe Gateway API.\n\nUsers SHOULD NOT route traffic based on repeated query params to guard\nthemselves against potential differences in the implementations.",
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
              "type": "string"
            },
            "type": {
              "default": "Exact",
              "description": "Type specifies how to match against the value of the query parameter.\n\nSupport: Extended (Exact)\n\nSupport: Implementation-specific (RegularExpression)\n\nSince RegularExpression QueryParamMatchType has Implementation-specific\nconformance, implementations can support POSIX, PCRE or any other\ndialects of regular expressions. Please read the implementation's\ndocumentation to determine the supported dialect.",
              "enum": ["Exact", "RegularExpression"],
              "type": "string"
            },
            "value": {
              "description": "Value is the value of HTTP query param to be matched.",
              "maxLength": 1024,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": ["name", "value"],
          "type": "object",
          "additionalProperties": false
        },
        "maxItems": 16,
        "type": "array",
        "x-kubernetes-list-map-keys": ["name"],
        "x-kubernetes-list-type": "map"
      }
    },
    "type": "object",
    "additionalProperties": false
  },

  "v1.httpRouteFilter": {
    "description": "HTTPRouteFilter defines processing steps that must be completed during the\nrequest or response lifecycle. HTTPRouteFilters are meant as an extension\npoint to express processing that may be done in Gateway implementations. Some\nexamples include request or response modification, implementing\nauthentication strategies, rate-limiting, and traffic shaping. API\nguarantee/conformance is defined based on the type of the filter.",
    "properties": {
      "extensionRef": {
        "description": "ExtensionRef is an optional, implementation-specific extension to the\n\"filter\" behavior.  For example, resource \"myroutefilter\" in group\n\"networking.example.net\"). ExtensionRef MUST NOT be used for core and\nextended filters.\n\nThis filter can be used multiple times within the same rule.\n\nSupport: Implementation-specific",
        "properties": {
          "group": {
            "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
            "maxLength": 253,
            "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string"
          },
          "kind": {
            "description": "Kind is kind of the referent. For example \"HTTPRoute\" or \"Service\".",
            "maxLength": 63,
            "minLength": 1,
            "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
            "type": "string"
          },
          "name": {
            "description": "Name is the name of the referent.",
            "maxLength": 253,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": ["group", "kind", "name"],
        "type": "object",
        "additionalProperties": false
      },
      "requestHeaderModifier": {
        "description": "RequestHeaderModifier defines a schema for a filter that modifies request\nheaders.\n\nSupport: Core",
        "properties": {
          "add": {
            "description": "Add adds the given header(s) (name, value) to the request\nbefore the action. It appends to any existing values associated\nwith the header name.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  add:\n  - name: \"my-header\"\n    value: \"bar,baz\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: foo,bar,baz",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          },
          "remove": {
            "description": "Remove the given header(s) from the HTTP request before the action. The\nvalue of Remove is a list of HTTP header names. Note that the header\nnames are case-insensitive (see\nhttps://datatracker.ietf.org/doc/html/rfc2616#section-4.2).\n\nInput:\n  GET /foo HTTP/1.1\n  my-header1: foo\n  my-header2: bar\n  my-header3: baz\n\nConfig:\n  remove: [\"my-header1\", \"my-header3\"]\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header2: bar",
            "items": {
              "type": "string"
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "set": {
            "description": "Set overwrites the request with the given header (name, value)\nbefore the action.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  set:\n  - name: \"my-header\"\n    value: \"bar\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: bar",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "requestMirror": {
        "description": "RequestMirror defines a schema for a filter that mirrors requests.\nRequests are sent to the specified destination, but responses from\nthat destination are ignored.\n\nThis filter can be used multiple times within the same rule. Note that\nnot all implementations will be able to support mirroring to multiple\nbackends.\n\nSupport: Extended\n\n",
        "properties": {
          "backendRef": {
            "description": "BackendRef references a resource where mirrored requests are sent.\n\nMirrored requests must be sent only to a single destination endpoint\nwithin this BackendRef, irrespective of how many endpoints are present\nwithin this BackendRef.\n\nIf the referent cannot be found, this BackendRef is invalid and must be\ndropped from the Gateway. The controller must ensure the \"ResolvedRefs\"\ncondition on the Route status is set to `status: False` and not configure\nthis backend in the underlying implementation.\n\nIf there is a cross-namespace reference to an *existing* object\nthat is not allowed by a ReferenceGrant, the controller must ensure the\n\"ResolvedRefs\"  condition on the Route is set to `status: False`,\nwith the \"RefNotPermitted\" reason and not configure this backend in the\nunderlying implementation.\n\nIn either error case, the Message of the `ResolvedRefs` Condition\nshould be used to provide more detail about the problem.\n\nSupport: Extended for Kubernetes Service\n\nSupport: Implementation-specific for any other resource",
            "properties": {
              "group": {
                "default": "",
                "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\".\nWhen unspecified or empty string, core API group is inferred.",
                "maxLength": 253,
                "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                "type": "string"
              },
              "kind": {
                "default": "Service",
                "description": "Kind is the Kubernetes resource kind of the referent. For example\n\"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live\noutside of the cluster and as such are difficult to reason about in\nterms of conformance. They also may not be safe to forward to (see\nCVE-2021-25740 for more information). Implementations SHOULD NOT\nsupport ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
                "type": "string"
              },
              "name": {
                "description": "Name is the name of the referent.",
                "maxLength": 253,
                "minLength": 1,
                "type": "string"
              },
              "namespace": {
                "description": "Namespace is the namespace of the backend. When unspecified, the local\nnamespace is inferred.\n\nNote that when a namespace different than the local namespace is specified,\na ReferenceGrant object is required in the referent namespace to allow that\nnamespace's owner to accept the reference. See the ReferenceGrant\ndocumentation for details.\n\nSupport: Core",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                "type": "string"
              },
              "port": {
                "description": "Port specifies the destination port number to use for this resource.\nPort is required when the referent is a Kubernetes Service. In this\ncase, the port number is the service port number, not the target port.\nFor other resources, destination port might be derived from the referent\nresource or this field.",
                "format": "int32",
                "maximum": 65535,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": ["name"],
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "Must have port for Service reference",
                "rule": "(size(self.group) == 0 && self.kind == 'Service') ? has(self.port) : true"
              }
            ],
            "additionalProperties": false
          },
          "fraction": {
            "description": "Fraction represents the fraction of requests that should be\nmirrored to BackendRef.\n\nOnly one of Fraction or Percent may be specified. If neither field\nis specified, 100% of requests will be mirrored.\n\n",
            "properties": {
              "denominator": {
                "default": 100,
                "format": "int32",
                "minimum": 1,
                "type": "integer"
              },
              "numerator": {
                "format": "int32",
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": ["numerator"],
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "numerator must be less than or equal to denominator",
                "rule": "self.numerator <= self.denominator"
              }
            ],
            "additionalProperties": false
          },
          "percent": {
            "description": "Percent represents the percentage of requests that should be\nmirrored to BackendRef. Its minimum value is 0 (indicating 0% of\nrequests) and its maximum value is 100 (indicating 100% of requests).\n\nOnly one of Fraction or Percent may be specified. If neither field\nis specified, 100% of requests will be mirrored.\n\n",
            "format": "int32",
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": ["backendRef"],
        "type": "object",
        "x-kubernetes-validations": [
          {
            "message": "Only one of percent or fraction may be specified in HTTPRequestMirrorFilter",
            "rule": "!(has(self.percent) && has(self.fraction))"
          }
        ],
        "additionalProperties": false
      },
      "requestRedirect": {
        "description": "RequestRedirect defines a schema for a filter that responds to the\nrequest with an HTTP redirection.\n\nSupport: Core",
        "properties": {
          "hostname": {
            "description": "Hostname is the hostname to be used in the value of the `Location`\nheader in the response.\nWhen empty, the hostname in the `Host` header of the request is used.\n\nSupport: Core",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string"
          },
          "path": {
            "description": "Path defines parameters used to modify the path of the incoming request.\nThe modified path is then used to construct the `Location` header. When\nempty, the request path is used as-is.\n\nSupport: Extended",
            "properties": {
              "replaceFullPath": {
                "description": "ReplaceFullPath specifies the value with which to replace the full path\nof a request during a rewrite or redirect.",
                "maxLength": 1024,
                "type": "string"
              },
              "replacePrefixMatch": {
                "description": "ReplacePrefixMatch specifies the value with which to replace the prefix\nmatch of a request during a rewrite or redirect. For example, a request\nto \"/foo/bar\" with a prefix match of \"/foo\" and a ReplacePrefixMatch\nof \"/xyz\" would be modified to \"/xyz/bar\".\n\nNote that this matches the behavior of the PathPrefix match type. This\nmatches full path elements. A path element refers to the list of labels\nin the path split by the `/` separator. When specified, a trailing `/` is\nignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all\nmatch the prefix `/abc`, but the path `/abcd` would not.\n\nReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.\nUsing any other HTTPRouteMatch type on the same HTTPRouteRule will result in\nthe implementation setting the Accepted Condition for the Route to `status: False`.\n\nRequest Path | Prefix Match | Replace Prefix | Modified Path",
                "maxLength": 1024,
                "type": "string"
              },
              "type": {
                "description": "Type defines the type of path modifier. Additional types may be\nadded in a future release of the API.\n\nNote that values may be added to this enum, implementations\nmust ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the\nAccepted Condition for the Route to `status: False`, with a\nReason of `UnsupportedValue`.",
                "enum": ["ReplaceFullPath", "ReplacePrefixMatch"],
                "type": "string"
              }
            },
            "required": ["type"],
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                "rule": "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true"
              },
              {
                "message": "type must be 'ReplaceFullPath' when replaceFullPath is set",
                "rule": "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true"
              },
              {
                "message": "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                "rule": "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true"
              },
              {
                "message": "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                "rule": "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true"
              }
            ],
            "additionalProperties": false
          },
          "port": {
            "description": "Port is the port to be used in the value of the `Location`\nheader in the response.\n\nIf no port is specified, the redirect port MUST be derived using the\nfollowing rules:\n\n* If redirect scheme is not-empty, the redirect port MUST be the well-known\n  port associated with the redirect scheme. Specifically \"http\" to port 80\n  and \"https\" to port 443. If the redirect scheme does not have a\n  well-known port, the listener port of the Gateway SHOULD be used.\n* If redirect scheme is empty, the redirect port MUST be the Gateway\n  Listener port.\n\nImplementations SHOULD NOT add the port number in the 'Location'\nheader in the following cases:\n\n* A Location header that will use HTTP (whether that is determined via\n  the Listener protocol or the Scheme field) _and_ use port 80.\n* A Location header that will use HTTPS (whether that is determined via\n  the Listener protocol or the Scheme field) _and_ use port 443.\n\nSupport: Extended",
            "format": "int32",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "scheme": {
            "description": "Scheme is the scheme to be used in the value of the `Location` header in\nthe response. When empty, the scheme of the request is used.\n\nScheme redirects can affect the port of the redirect, for more information,\nrefer to the documentation for the port field of this filter.\n\nNote that values may be added to this enum, implementations\nmust ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the\nAccepted Condition for the Route to `status: False`, with a\nReason of `UnsupportedValue`.\n\nSupport: Extended",
            "enum": ["http", "https"],
            "type": "string"
          },
          "statusCode": {
            "default": 302,
            "description": "StatusCode is the HTTP status code to be used in response.\n\nNote that values may be added to this enum, implementations\nmust ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the\nAccepted Condition for the Route to `status: False`, with a\nReason of `UnsupportedValue`.\n\nSupport: Core",
            "enum": [301, 302],
            "type": "integer"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "responseHeaderModifier": {
        "description": "ResponseHeaderModifier defines a schema for a filter that modifies response\nheaders.\n\nSupport: Extended",
        "properties": {
          "add": {
            "description": "Add adds the given header(s) (name, value) to the request\nbefore the action. It appends to any existing values associated\nwith the header name.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  add:\n  - name: \"my-header\"\n    value: \"bar,baz\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: foo,bar,baz",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          },
          "remove": {
            "description": "Remove the given header(s) from the HTTP request before the action. The\nvalue of Remove is a list of HTTP header names. Note that the header\nnames are case-insensitive (see\nhttps://datatracker.ietf.org/doc/html/rfc2616#section-4.2).\n\nInput:\n  GET /foo HTTP/1.1\n  my-header1: foo\n  my-header2: bar\n  my-header3: baz\n\nConfig:\n  remove: [\"my-header1\", \"my-header3\"]\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header2: bar",
            "items": {
              "type": "string"
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "set": {
            "description": "Set overwrites the request with the given header (name, value)\nbefore the action.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  set:\n  - name: \"my-header\"\n    value: \"bar\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: bar",
            "items": {
              "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
              "properties": {
                "name": {
                  "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be\ncase insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with\nan equivalent name MUST be considered for a match. Subsequent entries\nwith an equivalent header name MUST be ignored. Due to the\ncase-insensitivity of header names, \"foo\" and \"Foo\" are considered\nequivalent.",
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[A-Za-z0-9!#$%&'*+\\-.^_\\x60|~]+$",
                  "type": "string"
                },
                "value": {
                  "description": "Value is the value of HTTP Header to be matched.",
                  "maxLength": 4096,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": ["name", "value"],
              "type": "object",
              "additionalProperties": false
            },
            "maxItems": 16,
            "type": "array",
            "x-kubernetes-list-map-keys": ["name"],
            "x-kubernetes-list-type": "map"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "type": {
        "description": "Type identifies the type of filter to apply. As with other API fields,\ntypes are classified into three conformance levels:\n\n- Core: Filter types and their corresponding configuration defined by\n  \"Support: Core\" in this package, e.g. \"RequestHeaderModifier\". All\n  implementations must support core filters.\n\n- Extended: Filter types and their corresponding configuration defined by\n  \"Support: Extended\" in this package, e.g. \"RequestMirror\". Implementers\n  are encouraged to support extended filters.\n\n- Implementation-specific: Filters that are defined and supported by\n  specific vendors.\n  In the future, filters showing convergence in behavior across multiple\n  implementations will be considered for inclusion in extended or core\n  conformance levels. Filter-specific configuration for such filters\n  is specified using the ExtensionRef field. `Type` should be set to\n  \"ExtensionRef\" for custom filters.\n\nImplementers are encouraged to define custom implementation types to\nextend the core API with implementation-specific behavior.\n\nIf a reference to a custom filter type cannot be resolved, the filter\nMUST NOT be skipped. Instead, requests that would have been processed by\nthat filter MUST receive a HTTP error response.\n\nNote that values may be added to this enum, implementations\nmust ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the\nAccepted Condition for the Route to `status: False`, with a\nReason of `UnsupportedValue`.",
        "enum": [
          "RequestHeaderModifier",
          "ResponseHeaderModifier",
          "RequestMirror",
          "RequestRedirect",
          "URLRewrite",
          "ExtensionRef"
        ],
        "type": "string"
      },
      "urlRewrite": {
        "description": "URLRewrite defines a schema for a filter that modifies a request during forwarding.\n\nSupport: Extended",
        "properties": {
          "hostname": {
            "description": "Hostname is the value to be used to replace the Host header value during\nforwarding.\n\nSupport: Extended",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
            "type": "string"
          },
          "path": {
            "description": "Path defines a path rewrite.\n\nSupport: Extended",
            "properties": {
              "replaceFullPath": {
                "description": "ReplaceFullPath specifies the value with which to replace the full path\nof a request during a rewrite or redirect.",
                "maxLength": 1024,
                "type": "string"
              },
              "replacePrefixMatch": {
                "description": "ReplacePrefixMatch specifies the value with which to replace the prefix\nmatch of a request during a rewrite or redirect. For example, a request\nto \"/foo/bar\" with a prefix match of \"/foo\" and a ReplacePrefixMatch\nof \"/xyz\" would be modified to \"/xyz/bar\".\n\nNote that this matches the behavior of the PathPrefix match type. This\nmatches full path elements. A path element refers to the list of labels\nin the path split by the `/` separator. When specified, a trailing `/` is\nignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all\nmatch the prefix `/abc`, but the path `/abcd` would not.\n\nReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.\nUsing any other HTTPRouteMatch type on the same HTTPRouteRule will result in\nthe implementation setting the Accepted Condition for the Route to `status: False`.\n\nRequest Path | Prefix Match | Replace Prefix | Modified Path",
                "maxLength": 1024,
                "type": "string"
              },
              "type": {
                "description": "Type defines the type of path modifier. Additional types may be\nadded in a future release of the API.\n\nNote that values may be added to this enum, implementations\nmust ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the\nAccepted Condition for the Route to `status: False`, with a\nReason of `UnsupportedValue`.",
                "enum": ["ReplaceFullPath", "ReplacePrefixMatch"],
                "type": "string"
              }
            },
            "required": ["type"],
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "replaceFullPath must be specified when type is set to 'ReplaceFullPath'",
                "rule": "self.type == 'ReplaceFullPath' ? has(self.replaceFullPath) : true"
              },
              {
                "message": "type must be 'ReplaceFullPath' when replaceFullPath is set",
                "rule": "has(self.replaceFullPath) ? self.type == 'ReplaceFullPath' : true"
              },
              {
                "message": "replacePrefixMatch must be specified when type is set to 'ReplacePrefixMatch'",
                "rule": "self.type == 'ReplacePrefixMatch' ? has(self.replacePrefixMatch) : true"
              },
              {
                "message": "type must be 'ReplacePrefixMatch' when replacePrefixMatch is set",
                "rule": "has(self.replacePrefixMatch) ? self.type == 'ReplacePrefixMatch' : true"
              }
            ],
            "additionalProperties": false
          }
        },
        "type": "object",
        "additionalProperties": false
      }
    },
    "required": ["type"],
    "type": "object",
    "x-kubernetes-validations": [
      {
        "message": "filter.requestHeaderModifier must be nil if the filter.type is not RequestHeaderModifier",
        "rule": "!(has(self.requestHeaderModifier) && self.type != 'RequestHeaderModifier')"
      },
      {
        "message": "filter.requestHeaderModifier must be specified for RequestHeaderModifier filter.type",
        "rule": "!(!has(self.requestHeaderModifier) && self.type == 'RequestHeaderModifier')"
      },
      {
        "message": "filter.responseHeaderModifier must be nil if the filter.type is not ResponseHeaderModifier",
        "rule": "!(has(self.responseHeaderModifier) && self.type != 'ResponseHeaderModifier')"
      },
      {
        "message": "filter.responseHeaderModifier must be specified for ResponseHeaderModifier filter.type",
        "rule": "!(!has(self.responseHeaderModifier) && self.type == 'ResponseHeaderModifier')"
      },
      {
        "message": "filter.requestMirror must be nil if the filter.type is not RequestMirror",
        "rule": "!(has(self.requestMirror) && self.type != 'RequestMirror')"
      },
      {
        "message": "filter.requestMirror must be specified for RequestMirror filter.type",
        "rule": "!(!has(self.requestMirror) && self.type == 'RequestMirror')"
      },
      {
        "message": "filter.requestRedirect must be nil if the filter.type is not RequestRedirect",
        "rule": "!(has(self.requestRedirect) && self.type != 'RequestRedirect')"
      },
      {
        "message": "filter.requestRedirect must be specified for RequestRedirect filter.type",
        "rule": "!(!has(self.requestRedirect) && self.type == 'RequestRedirect')"
      },
      {
        "message": "filter.urlRewrite must be nil if the filter.type is not URLRewrite",
        "rule": "!(has(self.urlRewrite) && self.type != 'URLRewrite')"
      },
      {
        "message": "filter.urlRewrite must be specified for URLRewrite filter.type",
        "rule": "!(!has(self.urlRewrite) && self.type == 'URLRewrite')"
      },
      {
        "message": "filter.extensionRef must be nil if the filter.type is not ExtensionRef",
        "rule": "!(has(self.extensionRef) && self.type != 'ExtensionRef')"
      },
      {
        "message": "filter.extensionRef must be specified for ExtensionRef filter.type",
        "rule": "!(!has(self.extensionRef) && self.type == 'ExtensionRef')"
      }
    ],
    "additionalProperties": false
  }
}
